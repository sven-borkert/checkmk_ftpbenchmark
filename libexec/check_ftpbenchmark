#!/usr/bin/env python3
# -*- encoding: utf-8 -*-
import ftplib
import os
import sys
import random
import string
import hashlib
import argparse
from pathlib import Path
import traceback

import numpy as np
from ftplib import FTP
from timeit import default_timer as timer
from cmk.utils import password_store


def main():
    args = parse_arguments()
    try:
        f = FTPBenchmark(args)
        f.benchmark()
        f.print_and_quit()
    except ftplib.error_perm as e:
        sys.stdout.write("FTPLIB ERROR - %s\n" % e)
        return 3
    except Exception as e:
        sys.stdout.write("UNKNOWN - %s\n" % e)
        sys.stdout.write(traceback.format_exc())
        return 3


def parse_arguments(argv=None):
    if argv is None:
        argv = sys.argv[1:]

    parser = argparse.ArgumentParser(description=__doc__)
    parser.formatter_class = argparse.RawTextHelpFormatter
    parser.add_argument("--debug", "-d", action="store_true", help="Enable debug mode")
    parser.add_argument("--verbose", "-v", action="count", default=0)
    parser.add_argument("--host", help="FTP Server address", required=True)
    parser.add_argument("--port", help="FTP Server port", required=False, type=int, default=21)
    parser.add_argument("--user", help="Username", required=True)
    parser.add_argument("--password", help="Password", required=True)
    parser.add_argument("--active", help="Enable active mode transfer. Default is passive.", default=False, action='store_true')
    parser.add_argument("--path", help="Path to place testfile in. (A file will be created & deleted)", required=False, default="/")
    parser.add_argument("--file-size", help="Size of testfile (Will be created & deleted)", required=False, type=int, default=100)
    parser.add_argument("--upload", help="Enable upload benchmark", default=False, action='store_true' )
    parser.add_argument("--upload-count", help="Number of files to upload in one execution", required=False, type=int, default=100)
    parser.add_argument("--download", help="Enable download benchmark", default=False, action='store_true')
    parser.add_argument("--download-count", help="Number of files to download in one execution", required=False, type=int, default=100)
    args = parser.parse_args(argv)

    if ":/omd/sites/" in args.password:
        pw_id, pw_path = args.password.split(":")
        args.password = password_store.lookup(Path(pw_path), pw_id)
    if not args.path.endswith("/"):
        args.path = args.path +"/"

    return args


class ActiveCheck:

    def __init__(self, args):
        self.args = args
        self.state = 0
        self.msg = None
        self.__perf_data = {}
        self.__details = []

    def set_message(self, msg):
        self.msg = msg

    def set_perf_data(self, key, value):
        self.__perf_data[key] = value

    def increment_perf_data(self, key, increment=1):
        self.__perf_data[key] += increment

    def log_details(self, msg):
        self.__details.append(msg)

    def print_and_quit(self):
        n = 0
        perf_data_string = ""
        for key, value in self.__perf_data.items():
            if n > 0:
                perf_data_string += " "
            perf_data_string += f"{key}={value}"
            n += 1

        sys.stdout.write(f"{self.msg} | {perf_data_string}\n")
        for line in self.__details:
            sys.stdout.write(line)
            sys.stdout.write("\n")
        sys.exit(self.state)


class FTPBenchmark(ActiveCheck):

    def __init__(self, args):
        super().__init__(args)
        self.connection = None
        self.testfile = None
        self.testfile_digest = None
        self.download_transfers = []
        self.upload_transfers = []
        self.set_perf_data('connects', 0)

    def __get_authenticated_connection(self):
        if self.connection is not None:
            try:
                self.connection.pwd()
            except ftplib.all_errors as e:
                self.connection = None
        if self.connection is None:
            connection = FTP(timeout=10)
            a = timer()
            connection.connect(self.args.host, self.args.port, timeout=10)
            self.set_perf_data('connect_duration', timer() - a)
            a = timer()
            connection.login(self.args.user, self.args.password)
            self.set_perf_data('login_duration', timer() - a)
            connection.set_pasv(not self.args.active)
            self.connection = connection
            self.increment_perf_data("connects")
        return self.connection

    def benchmark(self):

        path_testfile_remote = os.path.normpath(self.args.path + "ftpbenchmark." + str(os.getpid()) + ".tmp")

        if self.args.download:

            self.set_perf_data('download_timeouts', 0)
            self.set_perf_data('download_errors', 0)
            self.set_perf_data('download_exceptions', 0)
            self.set_perf_data('download_digest_errors', 0)

            # Create and upload testfile
            self.create_local_testfile()
            with open(self.testfile, 'rb') as f:
                rc=self.__get_authenticated_connection().storbinary("STOR " + path_testfile_remote, f)

            # Perform benchmark
            for _ in range(self.args.download_count):
                try:
                    with open(self.testfile + ".download", 'wb') as fp:
                        a = timer()
                        rc = self.__get_authenticated_connection().retrbinary("RETR " + path_testfile_remote, fp.write)
                        if not rc.startswith("226"):
                            self.increment_perf_data('download_errors')
                        self.download_transfers.append(timer() - a)
                    if not self.validate_download():
                        self.increment_perf_data('download_digest_errors')
                    os.remove(self.testfile + ".download")
                except TimeoutError as e:
                    self.increment_perf_data('download_timeouts')
                    self.connection = None
                except Exception as e:
                    if self.args.verbose > 0:
                        self.log_details(traceback.format_exc())
                    self.increment_perf_data('download_exceptions')

                self.set_perf_data('downloads', len(self.download_transfers))
                self.set_perf_data('download_duration', sum(self.download_transfers))
                self.set_perf_data('download_average_duration', np.mean(self.download_transfers))
                self.set_perf_data('download_min_duration', min(self.download_transfers))
                self.set_perf_data('download_max_duration', max(self.download_transfers))

            # Remove local and remote testfile
            os.remove(self.testfile)
            self.__get_authenticated_connection().delete(path_testfile_remote)

        if self.args.upload:

            self.set_perf_data('upload_timeouts', 0)
            self.set_perf_data('upload_errors', 0)
            self.set_perf_data('upload_exceptions', 0)

            # Create testfile
            self.create_local_testfile()
            for _ in range(self.args.upload_count):
                try:
                    with open(self.testfile, 'rb') as f:
                        a = timer()
                        rc = self.__get_authenticated_connection().storbinary("STOR " + path_testfile_remote, f)
                        if not rc.startswith("226"):
                            self.increment_perf_data('upload_errors')
                        self.upload_transfers.append(timer() - a)
                        rc = self.__get_authenticated_connection().delete(path_testfile_remote)
                        if not rc.startswith("250"):
                            self.increment_perf_data('upload_errors')
                except TimeoutError as e:
                    self.increment_perf_data('upload_timeouts')
                    self.connection = None
                except Exception as e:
                    if self.args.verbose > 0:
                        self.log_details(traceback.format_exc())
                    self.increment_perf_data('upload_exceptions')
            os.remove(self.testfile)

        self.__get_authenticated_connection().quit()

        self.msg = "OK"
        self.state = 0

    def create_local_testfile(self):
        testfile = os.environ["HOME"]+"/tmp/ftpbenchmark."+str(os.getpid())+".tmp"
        with open(testfile, 'w') as f:
            characters = string.ascii_letters + string.digits + string.punctuation + string.whitespace
            for _ in range(self.args.file_size):
                f.write(random.choice(characters))
        with open(testfile, 'rb') as f:
            testfile_digest = hashlib.file_digest(f, "sha256").hexdigest()
        self.testfile = testfile
        self.testfile_digest = testfile_digest

    def validate_download(self) -> bool:
        with open(self.testfile + ".download", 'rb') as f:
            d = hashlib.file_digest(f, "sha256").hexdigest()
        return self.testfile_digest == d

if __name__ == "__main__":
    sys.exit(main())
